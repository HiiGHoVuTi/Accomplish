
rust!\
#![feature(proc_macro_hygiene, decl_macro)]

#[macro_use]
extern crate rocket;
use rocket::response::{
    content::Html,
    Flash, Redirect
};
use rocket::Request;
use rocket::http::{Cookies, Cookie};

extern crate rocket_contrib;
use rocket_contrib::json::Json;

use render::{rsx, Render};

use std::fs;

extern crate rand;

extern crate csv;
#[macro_use]
extern crate serde_derive;

extern crate gbdt;


mod client {
    pub mod index;
    pub mod todo;
    pub mod activities;
    pub mod suggestions;
    pub mod err404;
    pub mod _page;
}
mod srv {
    pub mod todos;
    pub mod activities;

    pub mod ml;
}

use crate::srv::todos::{Todo};
use crate::srv::todos;

use crate::srv::activities::Activity;
use crate::srv::activities;
\;

format_and_HTML := String: txt => Html{String}: {
    return Html(txt
        .replace("&quot;", "\"")
        .replace("&gt;", ">")
        .replace("&lt;", "<")
        .replace("&amp;", "&")
        .replace("&apos;", "'")
    );
};

rust!\#[catch(404)]\;
not_found := Ref{Request}: req => Html{String}: {
    ret  format_and_HTML(client::err404::index(format!\("{}", req.uri())\));
};

rust!\#[get("/public/<name>")]\;
files := String: name => Html{String}: {
    raw := fs::read_to_string(format!\("/client/public/{}", name)\);
    if Ok(value) = raw {
        return format_and_HTML(value);
    } else {
        return format_and_HTML(client::err404::index(name));
    };
};

rust!\#[get("/")]\;
index := None => rust!\Html<String>\: {
    ret format_and_HTML(client::index::index());
};


rust!\#[get("/login")]\;
login := Mut * Cookies: cookies => Flash{Redirect}: {
    if Some(user_id) = cookies.get_private("user_id") {
        return Flash::success(Redirect::to("/"), "Already logged in");
    } else {
        uid := rand::random::{u128}().to_string();
        cookies.add_private(Cookie::new("user_id", uid.to_string()));

        Mut: handle = csv::Writer::from_writer(fs::OpenOptions::new()
            .append(true)
            .open("users.csv")
            .expect("a file")
        );
        handle.write_record(Ref([uid])).expect("an entry");
        handle.flush().expect("a write to the db");

        return Flash::success(Redirect::to("/"), "Logged in, created account");
    };
};


rust!\#[get("/home")]\;
home := None => Flash{Redirect}: {
    ret Flash::success(Redirect::to("/"), "redirected to home");
};

rust!\#[get("/suggestions")]\;
suggestions := Mut * Cookies: cookies => Html{String}: {
    if Some(user_id) = cookies.get_private("user_id"){
        ret format_and_HTML(client::suggestions::index(user_id.value().to_string()));
    } else {
        ret format_and_HTML("you're not logged in, please <a href = '/login'>login here</a>".to_string());
    };
};

rust!\#[get("/todo")]\;
todo := Mut * Cookies: cookies => Html{String}: {
    if Some(user_id) = cookies.get_private("user_id"){
        ret format_and_HTML(client::todo::index(user_id.value().to_string()));
    } else {
        ret format_and_HTML("you're not logged in, please <a href = '/login'>login here</a>".to_string());
    };
};

rust!\#[post("/todoadd", format = "application/json", data = "<todo>")]\;
todo_add := Mut * Cookies: cookies, Json{Todo}: todo => Void: {
    if Some(user_id) = cookies.get_private("user_id"){
        todos::add(todo);
    };
};

rust!\#[get("/activity")]\;
activity := Mut * Cookies: cookies => Html{String}: {
    if Some(user_id) = cookies.get_private("user_id"){
        ret format_and_HTML(client::activities::index(user_id.value().to_string()));
    } else {
        ret format_and_HTML("you're not logged in, please <a href = '/login'>login here</a>".to_string());
    };
};

rust!\#[post("/activityadd", format = "application/json", data = "<activity>")]\;
activity_add := Mut * Cookies: cookies, Json{Activity}: activity => Void: {
    if Some(user_id) = cookies.get_private("user_id"){
        activities::add(activity);
    };
};



main := None => Void: {
    rocket::ignite()
        .mount("/", routes!\[index, login, home, suggestions, todo, todo_add, activity, activity_add, files]\)
        .register(catchers!\[not_found]\)
        .launch();
};
